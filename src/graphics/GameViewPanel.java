/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphics;

import graphics.graphicalWorld.GraphicsTile;
import graphics.sprites.Sprite;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;

import javax.swing.JLabel;
import javax.swing.JPanel;

import world.Tile;
import world.World;

/**
 *
 * @author Robert
 */
public class GameViewPanel extends JPanel {
	private static final long serialVersionUID = 1L;
	
	private int width, height;//the number of tiles to show on screen at any given time (as number wide and tall)
	private World world;
	
	private JPanel controlPanel;
	private JPanel worldViewPanel;
	private JLabel offensiveActionsLabel;
	private JLabel defensiveActionsLabel;
	private JLabel otherActionsLabel;
	private JLabel inventoryQuickviewLabel;
	/**
	 * Creates new form GameViewPanel
	 */
	public GameViewPanel(World world) {
		this.world = world;
		//TODO: auto-determine the number of tiles across and tall by seeing how many will fit on the screen for a certain size tile (also a tile size variable) 
		this.width = 20;
		this.height = 10;
		initComponents();
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		//TODO: generate the GraphicsTile's and arrange them using a GridLayout
		//initialize all of the components
		controlPanel = new JPanel();
		worldViewPanel = new JPanel();
		offensiveActionsLabel = new JLabel();
		defensiveActionsLabel = new JLabel();
		otherActionsLabel = new JLabel();
		inventoryQuickviewLabel = new JLabel();
		
		FlowLayout layout = new FlowLayout();
		layout.setHgap(0);
		layout.setVgap(0);
		layout.setAlignment(FlowLayout.CENTER);
		this.setLayout(layout);
		
		worldViewPanel.setPreferredSize(new Dimension(640, 320));
		worldViewPanel.setBackground(Color.blue);
		
		GridLayout gridLayout = new GridLayout(height, width);//set the gridLayout for the GraphcsTile's to be the pre-determined width & height
		gridLayout.setVgap(0);
		gridLayout.setHgap(0);
		worldViewPanel.setLayout(gridLayout);
		
		//create width*height number of GraphicsTile's and add them to the view grid
		GraphicsTile[][] tileArray = new GraphicsTile[width][height];//an array of tile graphical wrappers
		for(int y = 0; y < tileArray[0].length; y++){
			for(int x = 0; x < tileArray.length; x++){
				tileArray[x][y] = new GraphicsTile(world.getTile(x, y));//placing the tiles into the wrappers
				worldViewPanel.add(tileArray[x][y]);//add the freshly created GraphicsTile to the worldViewPane to be rendered
			}
		}
		
		
		
		controlPanel.setPreferredSize(new Dimension(640, 160));
		controlPanel.setBackground(Color.RED);
		
		offensiveActionsLabel.setText("Offensive Actions");
		defensiveActionsLabel.setText("Defensive Actions");
		otherActionsLabel.setText("Other Actions");
		inventoryQuickviewLabel.setText("Inventory");
		
		
		//add components to the panels within this one
		controlPanel.add(offensiveActionsLabel);
		controlPanel.add(defensiveActionsLabel);
		controlPanel.add(otherActionsLabel);
		controlPanel.add(inventoryQuickviewLabel);
		
		//add the components to this back-most panel
		this.add(worldViewPanel);
		this.add(controlPanel);
	}
}